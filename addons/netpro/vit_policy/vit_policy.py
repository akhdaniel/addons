# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
from openerp.osv import fields,osv
import time
from datetime import date

class netpro_policy(osv.osv):
    _name = 'netpro.policy'
    _rec_name = 'policy_no'
    _columns = {
        'policy_no': fields.char('Policy No'),
        'reference_no': fields.char('Reference No'),
        'quotation_no': fields.char('Quotation No'),
        'ci': fields.char('C/I'),
        'corporate_id': fields.char('Corporate ID'),
        'policy_category_id': fields.many2one('netpro.policy_category','Policy Category'),
        'individual_member_limit': fields.integer('Individual Member Limit'),
        'policy_type_id': fields.many2one('netpro.policy_type', 'Policy Type'),
        'branch_id': fields.many2one('netpro.branch', 'Branch'),
        'marketing_officer_id': fields.many2one('res.partner', 'Marketing Officer'),
        'policy_holder_id': fields.many2one('res.partner', 'Policy Holder', required=True),
        'policy_group_id': fields.many2one('netpro.policy_group', 'Group'),
        'insurance_period_start': fields.date('Insurance Period Start', required=True),
        'insurance_period_end': fields.date('Insurance Period End', required=True),
        'exclusive_period': fields.boolean('Exclusive Period'),
        'toc_id': fields.many2one('netpro.toc', 'TOC'),
        'ujroh': fields.float('Ujroh'),
        'currency_id': fields.many2one('res.currency', 'Currency'),
        'policy_payor_id': fields.many2one('res.partner', 'Policy Payor'),
        'insurance_source_id': fields.many2one('res.partner', 'Insurance Source'),
        'segment_id': fields.many2one('netpro.segment', 'Segment'),
        'pic_id': fields.many2one('res.partner', 'PIC'),
        'policy_date': fields.date('Policy Date'),
        'business_source_id': fields.many2one('res.partner', 'Business Source'),
        'lob_id': fields.many2one('netpro.lob', 'LOB'),
        'occupation_id': fields.many2one('netpro.occupation', 'Occupation'),
        'existing_policy_no_id': fields.many2one('netpro.policy', 'Existing Policy No'),
        'province1_id': fields.many2one('res.country.state', 'Region'),
        'province3_id': fields.many2one('res.country.state', ' '),
        'province2_id': fields.many2one('res.country.state', ' '),
        'province4_id': fields.many2one('res.country.state', ' '),
        'province5_id': fields.many2one('res.country.state', ' '),
        'remarks': fields.text('Remarks'),
        'payment_option_mode_id': fields.many2one('netpro.payment_option_mode', 'Payment Option Mode'),
        'payment_option_installment_id': fields.many2one('netpro.payment_option_installment', 'Payment Option Installment'),
        'refund_adj': fields.float('Refund Adj.'),
        'refund_with_claim_deduction': fields.boolean('Refund with Claim Deduction'),
        'endorsement_fee': fields.float('Endorsement Fee'),
        'endorsement_with_installment': fields.boolean('Endorsement with Installment'),
        'refund_type_id': fields.many2one('netpro.refund_type', 'Add / Refund Type'),
        'no_refund_changing_premium_difference': fields.boolean('No refund changing premium difference'),
        'print_card_name': fields.char('Print Name'),
        'print_card_order_id': fields.many2one('netpro.print_card_order', 'Print Order'),
        'print_card_birthdate': fields.boolean('Print Birthdate'),
        'print_card_sex': fields.boolean('Print Sex'),
        'print_card_plan': fields.boolean('Print Plan'),
        'tpa_id': fields.many2one('netpro.tpa', 'TPA'),
        'calculation_method_id': fields.many2one('netpro.calculation_method', 'Calculation Method'),
        'prorate_calc_method_id': fields.many2one('netpro.prorate_calc_method', 'Prorate Calc Method'),
        'expired_claim_receipt_jabodetabek_id': fields.many2one('netpro.expired_claim_receipt', 'Expired Claim Receipt', help='Expired Claim Receipt Jabodetabek' ),
        'expired_claim_receipt_non_jabodetabek_id': fields.many2one('netpro.expired_claim_receipt', 'Expired Claim Receipt Non Jabodetabek', help='Expired Claim Receipt Non Jabodetabek'),
        'payment_due_days': fields.integer('Payment Due Days'),
        'payment_due_interval_id': fields.many2one('netpro.payment_due_interval', 'Payment Due Interval'),
        'max_age_children': fields.integer('Max Age Children'),
        'max_children_id': fields.many2one('netpro.max_children', 'Max Children'),
        'max_children_maternity_id': fields.many2one('netpro.max_children_maternity', 'Max Children Maternity'),
        'card_type_id': fields.many2one('netpro.card_type', 'Card Type'),
        'pre_existing_condition_id': fields.many2one('netpro.pre_existing_condition', 'Pre Existing Condition'),
        'tolerance_up_room_percent': fields.integer('Tolerance Up Room Percent'),
        'tolerance_up_room_amount': fields.float('ToleranceUpRoomAmount'),
        'up_room_class_id': fields.many2one('netpro.up_room_class', 'Up Room Class'),
        'up_room_class_days': fields.integer('Up Room Class Days'),
        'prorate_after_tolerance_addition': fields.boolean('Prorate After Tolerance Addition'),
        'allow_adult_child_premium': fields.boolean('Allow Adult Child Premium'),
        'have_sub_company': fields.boolean('Have Sub Company'),
        'female_spouse_only': fields.boolean('Female Spouse Only'),
        'profit_sharing': fields.boolean('Profit Sharing'),
        'use_in_house_clinic': fields.boolean('Use In House Clinic'),
        'allow_plan_sharing': fields.boolean('Allow Plan Sharing'),
        'renewal_with_old_card': fields.boolean('Renewal with Old Card'),
        'renewal_manual': fields.boolean('Renewal Manual (TPA)'),
        'commission_by_gross_premium': fields.boolean('Commission by Gross Premium'),
        'allow_excesson_reimbursement': fields.boolean('Allow Excess on Reimbursement'),
        'aso_deposit': fields.float('ASO Deposit'),
        'bank_id': fields.many2one('res.partner.bank', 'Bank'),
        'vaccount_no': fields.char('V Account No'),
        'bank_optional_id': fields.many2one('res.partner.bank', 'Bank Optional', help='Relasi ke Partner Bank'),
        'vaccount_no_optional': fields.char('V Account No Optional'),
        'policy_status': fields.selection([('open','Open'), ('approved','Approved'), ('closed', 'Closed')],'Policy Status'),
        'state': fields.selection([('open','Open'), ('approved','Approved'), ('closed', 'Closed'), ('endorsed', 'Endorsed')],'Policy Status'),
        'endorsement_date': fields.date('Endorsement Date'),
        'email_date': fields.date('EmailDate'),
        'int_endorsement_no': fields.integer('Int. Endorsement No'),
        'ext_endorsement_no': fields.integer('Ext. Endorsement No'),
        'pno': fields.integer('PNO'),
        'ppno': fields.integer('PPNO'),
        'cancel_policy': fields.boolean('Cancel Policy'),
        'profit_sharing_endorsement': fields.boolean('Profit Sharing Endorsement'),
        'created_by_id': fields.many2one('res.users', 'Created By', readonly=True),
        'created_by_date': fields.datetime('Created By Date', readonly=True),
        'last_edited_by_id': fields.many2one('res.users', 'Last Edited By', readonly=True),
        'last_edited_by_date': fields.datetime('Last Edited By Date', readonly=True),
        'approved_by_id': fields.many2one('res.users', 'Approved By', readonly=True),
        'approved_by_date': fields.datetime('Approved By Date', readonly=True),
        'claim_rule_reimbursement_payee_id': fields.many2one('netpro.claim_rule', 'Reimbursement Payee'),
        'claim_rule_excess_payor_id': fields.many2one('netpro.claim_rule', 'Excess Payor'),
        'claim_rule_refund_payee_id': fields.many2one('netpro.claim_rule', 'Refund Payee'),
        'correspondence_rule_premium_id': fields.many2one('netpro.correspondence_rule', 'Premium'),
        'correspondence_rule_claim_id': fields.many2one('netpro.correspondence_rule', 'Claim'),
        'discount_special_discount': fields.float('Special Discount'),
        'discount_direct_discount': fields.float('Direct Discount'),
        'discount_discount_amount': fields.float('Discount Amount'),
        'discount_discount_only_apply_on_policy': fields.boolean('Discount Only Apply On Policy'),
        'loading_cc_loading': fields.float('CC Loading'),
        'deposit_deposit_recovery': fields.float('Deposit Recovery'),
        'claim_reimbursement_transfer_fee': fields.float('Fee (per employee)'),
        'other_settings_admin_cost': fields.float('Admin Cost'),
        'other_settings_card_fee': fields.float('@Card Fee'),
        'other_settings_total_card_fee': fields.float('Total Card Fee'),
        'other_settings_total_cdmin_cost': fields.float('Total Admin Cost'),
        'other_settings_stamp_duty': fields.float('Stamp Duty'),
        'other_settings_interest': fields.float('Interest'),
        'pool_fund_info_pool_fund': fields.float('Pool Fund'),
        'pool_fund_info_max_pool_fund_member': fields.integer('Max Pool Fund Member'),
        'pool_fund_info_max_member_pool_fund': fields.float('@Max Member Pool Fund'),
        'pool_fund_info_remarks': fields.text('Remarks'),
        'edc_apply_prorate': fields.boolean('Apply Prorate'),
        'edc_show_excess_amount': fields.boolean('Show Excess Amount'),
        'edc_show_excess_remarks': fields.boolean('Show Excess Remarks'),
        'edc_excess_remarks': fields.text('Excess Remarks'),
        'edc_disable_edc_for_inpatient': fields.boolean('Disable EDC For Inpatient'),
        'edc_disable_edc_for_outpatient': fields.boolean('Disable EDC For Outpatient'),
        'edc_disable_edc_for_maternity': fields.boolean('Disable EDC For Maternity'),
        'edc_disable_edc_for_dental': fields.boolean('Disable EDC For Dental'),
        'edc_disable_swipe_for_excessed_limit': fields.boolean('Disable Swipe For Excessed Limit'),
        'edc_ignore_claim_over_below_settings': fields.boolean('Ignore Claim Over Below Settings'),
        'edc_inpatient': fields.integer('Inpatient'),
        'edc_outpatient': fields.integer('Outpatient'),
        'edc_maternity': fields.integer('Maternity'),
        'edc_dental': fields.integer('Dental'),
        'profit_sharing_sharing_remarks': fields.text('Sharing Remarks'),
        'profit_sharing_gross_premium': fields.float('Gross Premium'),
        'profit_sharing_claim_paid': fields.float('Claim Paid'),
        'profit_sharing_claim_ratio': fields.float('Claim Ratio'),
        'profit_sharing_formula': fields.text('Formula'),
        'profit_sharing_profit_sharing': fields.float('Profit Sharing'),
        'profit_sharing_adjustment': fields.float('Adjustment'),
        'profit_sharing_profit_sharing_amt': fields.float('Profit Sharing Amt'),
        'coverage_ids': fields.one2many('netpro.coverage', 'policy_id', 'Coverages', ondelete='cascade'),
        'class_ids': fields.one2many('netpro.class', 'policy_id', 'Classes', ondelete='cascade'),
        'plan_schedule_ids': fields.one2many('netpro.plan_schedule', 'policy_id', 'Plan Schedules', ondelete='cascade'),
        'business_source_ids': fields.one2many('netpro.business_source', 'policy_id', 'Business Sources', ondelete='cascade'),
        'ci_date': fields.date('C/I Date'),
        #'policy_enroll_plan_ids' : fields.one2many('netpro.policy_enroll_plan','policy_id','Enroll Plan', ondelete="cascade"),
    }
    _defaults = {
        'ci_date'   : lambda*a : time.strftime("%Y-%m-%d"),
        'state'     : 'open',
        #'policy_no' : lambda self, cr, uid, context: self.pool.get('ir.sequence').get(cr, uid, 'policy_seq') or '/',
    }
    def create(self, cr, uid, vals, context=None):
        import pdb;pdb.set_trace()
        nomor = self.pool.get('ir.sequence').get(cr, uid, 'policy_seq') or '/'
        cur_user = self.pool.get('res.users').browse(cr, uid, uid, context=None)
        tpa_val = False
        pno_val = vals['pno']

        if not pno_val:
            pno_val = self.pool.get('ir.sequence').get(cr, uid, 'pno_seq') or 8888

        if cur_user.tpa_id:
            tpa_val = cur_user.tpa_id.id

        vals.update({
            'policy_no':nomor,
            'pno':pno_val,
            'created_by_id':uid,
            'tpa_id':tpa_val,
            'created_by_date':time.strftime("%Y-%m-%d %H:%M:%S"),
        })
        new_id = super(netpro_policy, self).create(cr, uid, vals, context=context)
        return new_id

    def write(self,cr,uid,ids,vals,context=None):
        #isi tanggal edit dan editor
        vals.update({
            'last_edited_by_id':uid,
            'last_edited_by_date':time.strftime("%Y-%m-%d %H:%M:%S"),
        })
        return super(netpro_policy, self).write(cr, uid, ids, vals, context=context)

    def action_approve(self,cr,uid,ids,context=None):
        # create schedule plan
        self.create_plan_schedule(cr,uid,ids,context=context)
        # create enroll plan
        self.create_enroll_plan(cr,uid,ids,context=context)
        #set to "approve" state
        self.write(cr,uid,ids,{'state':'approved', 'approved_by_date':time.strftime("%Y-%m-%d %H:%M:%S"), 'approved_by_id':uid},context=context)
        return 
    
    def action_cancel(self,cr,uid,ids,context=None):
        #set to "cancel" state
        return self.write(cr,uid,ids,{'state':'open'},context=context)
    
    def action_close(self,cr,uid,ids,context=None):
        #set to "close" state
        return self.write(cr,uid,ids,{'state':'closed'},context=context)

    def action_endorse(self,cr,uid,ids,context=None):
        #set to "close" state
        #ext_policy = self.browse(cr, uid, ids[0], context=context)
        data = self.browse(cr, uid, ids[0])
        cov_ids = []
        for x in data.coverage_ids:
            cov_ids.append([0,0,{
                'product_type_id' : x.product_type_id.id,
                'product_id' : x.product_id.id,
                'reimbursement' : x.reimbursement,
                }])
        default_val = {
            'policy_no' : self.pool.get('ir.sequence').get(cr, uid, 'policy_seq') or '/',
            'state' : 'endorsed',
            'coverage_ids' : cov_ids,
        }
        new_policy = self.copy(cr, uid, ids[0], default_val, context=context)
        return self.write(cr,uid,ids,{'state':'closed'},context=context)

    def create_enroll_plan(self, cr, uid, ids, context=None):
        membership_benefit_obj = self.pool.get('netpro.membership_benefit')
        this = self.browse(cr, uid, ids[0], context=context)

        if this.class_ids:
            for cur_class in this.class_ids:

                # Membership Employee
                if len(cur_class.membership_plan_employee_ids) > 0:
                    for mem_employee in cur_class.membership_plan_employee_ids:
                        if len(mem_employee.product_plan_id.benefit_ids) > 0:
                            for cur_benefit in mem_employee.product_plan_id.benefit_ids:
                                membership_benefit_obj.create(cr, uid, {'membership_plan_employee_id':mem_employee.id,
                                                                        'benefit_id':cur_benefit.id,
                                                                        'default_limit_id':cur_benefit.default_limit_id.id,
                                                                        'value_limit':cur_benefit.value_limit})

                # Membership Spouse
                if len(cur_class.membership_plan_spouse_ids) > 0:
                    for mem_spouse in cur_class.membership_plan_spouse_ids:
                        if len(mem_spouse.product_plan_id.benefit_ids) > 0:
                            for cur_benefit in mem_spouse.product_plan_id.benefit_ids:
                                membership_benefit_obj.create(cr, uid, {'membership_plan_spouse_id':mem_spouse.id,
                                                                        'benefit_id':cur_benefit.id,
                                                                        'default_limit_id':cur_benefit.default_limit_id.id,
                                                                        'value_limit':cur_benefit.value_limit})

                # Membership Child
                if len(cur_class.membership_plan_child_ids) > 0:
                    for mem_child in cur_class.membership_plan_child_ids:
                        if len(mem_child.product_plan_id.benefit_ids) > 0:
                            for cur_benefit in mem_child.product_plan_id.benefit_ids:
                                membership_benefit_obj.create(cr, uid, {'membership_plan_child_id':mem_child.id,
                                                                        'benefit_id':cur_benefit.id,
                                                                        'default_limit_id':cur_benefit.default_limit_id.id,
                                                                        'value_limit':cur_benefit.value_limit})

            # END LOOP CLASS
        # END IF CONDITION

        # check apakah sudah ada enroll plan
        # if not this.policy_enroll_plan_ids:
        #     # check ada coverage
        #     if this.coverage_ids:
        #         # loop setiap coverage
        #         for cov in this.coverage_ids:
        #             cov_product_id = cov.product_id.id
        #             cov_number_of_plan = int(cov.no_plan)
        #             product_benefits = cov.product_id.benefit_ids
        #             cov_default_limit_id = cov.default_limit_id.id

        #             enroll_plan_id = enroll_plan_obj.create(cr, uid, {'policy_id':this.id,
        #                                                               'product_id':cov_product_id,
        #                                                               'number_of_plan':cov_number_of_plan})

        #             # check produknya ada benefit?
        #             if product_benefits:
        #                 # loop per benefit nya
        #                 for bens in product_benefits:
        #                     benefit_enroll_id = benefit_enroll_obj.create(cr, uid, {'policy_enroll_plan_id':enroll_plan_id,
        #                                                                             'benefit_id':bens.id,
        #                                                                             'default_limit_id':cov_default_limit_id})
        return True

    def create_plan_schedule(self, cr, uid, ids, context=None):

        class_obj           = self.pool.get('netpro.class')
        pplan_obj           = self.pool.get('netpro.product_plan')
        pplan_bnft_obj      = self.pool.get('netpro.product_plan_benefit')
        pplan_sch_obj       = self.pool.get('netpro.plan_schedule')
        mplan_emp_obj       = self.pool.get('netpro.membership_plan_employee')
        mplan_spo_obj       = self.pool.get('netpro.membership_plan_spouse')
        mplan_chi_obj       = self.pool.get('netpro.membership_plan_child')
        plan_schedule_obj   = self.pool.get('netpro.plan_schedule_detail_benefit_schedule')
        self_obj    = self.browse(cr,uid,ids[0],context=context)
        # jika belum ada schedule
        if not self_obj.plan_schedule_ids:
            #jika classnya diisi
            if self_obj.class_ids:
                #looping setiap class yang ada
                for line in self_obj.class_ids:
                    class_no = line.class_no
                    #Class employee 
                    if line.membership_plan_employee_ids:
                        for plan_emp in line.membership_plan_employee_ids:
                            product_plan_id = plan_emp.product_plan_id.id
                            male_female_bamount = plan_emp.male_female_bamount
                            #create schedule
                            plan_schedule_id = pplan_sch_obj.create(cr,uid,{'policy_id':self_obj.id,
                                                                            'product_plan_id':product_plan_id,
                                                                            'bamount':male_female_bamount,
                                                                            'plan_for':'Employee',
                                                                            'class_id':line.id})
                            plan_benefit_schedule_ids = pplan_bnft_obj.search(cr,uid,[('product_plan_id','=',product_plan_id)])
                            #mport pdb;pdb.set_trace()
                            if plan_benefit_schedule_ids :
                                for benefit in pplan_bnft_obj.browse(cr,uid,plan_benefit_schedule_ids):
                                    reimbursement = benefit.reimbursement 
                                    #create schedule detail
                                    plan_schedule_obj.create(cr,uid,{'plan_schedule_id':plan_schedule_id,
                                                                     'product_plan_id':product_plan_id,
                                                                     'benefit_id':benefit.benefit_id.id,
                                                                     #'company_inner_limit_reimbursement':reimbursement
                                                                     })

                    #Class spouse 
                    if line.membership_plan_spouse_ids:
                        for plan_spouse in line.membership_plan_spouse_ids:
                            product_plan_id = plan_spouse.product_plan_id.id
                            male_female_bamount = plan_spouse.male_female_bamount
                            #create schedule
                            plan_schedule_id = pplan_sch_obj.create(cr,uid,{'policy_id':self_obj.id,
                                                                            'product_plan_id':product_plan_id,
                                                                            'bamount':male_female_bamount,
                                                                            'plan_for':'Spouse',
                                                                            'class_id':line.id})
                            plan_benefit_schedule_ids = pplan_bnft_obj.search(cr,uid,[('product_plan_id','=',product_plan_id)])
                            if plan_benefit_schedule_ids :
                                for benefit in pplan_bnft_obj.browse(cr,uid,plan_benefit_schedule_ids):
                                    reimbursement = benefit.reimbursement 
                                    #create schedule detail
                                    plan_schedule_obj.create(cr,uid,{'plan_schedule_id':plan_schedule_id,
                                                                     'product_plan_id':product_plan_id,
                                                                     'benefit_id':benefit.benefit_id.id,
                                                                     #'company_inner_limit_reimbursement':reimbursement
                                                                     })

                    #Class spouse 
                    if line.membership_plan_child_ids:
                        for plan_child in line.membership_plan_child_ids:
                            product_plan_id = plan_child.product_plan_id.id
                            male_female_bamount = plan_child.male_female_bamount
                            #create schedule
                            plan_schedule_id = pplan_sch_obj.create(cr,uid,{'policy_id':self_obj.id,
                                                                            'product_plan_id':product_plan_id,
                                                                            'bamount':male_female_bamount,
                                                                            'plan_for':'Child',
                                                                            'class_id':line.id})
                            plan_benefit_schedule_ids = pplan_bnft_obj.search(cr,uid,[('product_plan_id','=',product_plan_id)])
                            if plan_benefit_schedule_ids :
                                for benefit in pplan_bnft_obj.browse(cr,uid,plan_benefit_schedule_ids):
                                    reimbursement = benefit.reimbursement
                                    #create schedule detail 
                                    plan_schedule_obj.create(cr,uid,{'plan_schedule_id':plan_schedule_id,
                                                                     'product_plan_id':product_plan_id,
                                                                     'benefit_id':benefit.benefit_id.id,
                                                                     #'company_inner_limit_reimbursement':reimbursement
                                                                     })  
        return  True

    def onchange_start(self, cr, uid, ids, start, context=None):
        res = {}
        if not start:
            return res
        startnya = time.strptime(start,"%Y-%m-%d")
        date_start = date(startnya[0], startnya[1], startnya[2])
        date_end = date(startnya[0]+1, startnya[1], startnya[2])
        res = {
            'value' : {
                'insurance_period_end' : date_end,
            }
        }
        return res


netpro_policy()

# class netpro_policy_enroll_plan(osv.osv):
#     _name = 'netpro.policy_enroll_plan'
#     _columns = {
#         'policy_id' : fields.many2one('netpro.policy', 'Policy'),
#         'product_id' : fields.many2one('netpro.product', 'Product'),
#         'product_plan_id' : fields.integer('Number Of Plan'),
#         'benefit_enroll_ids' : fields.one2many('netpro.benefit_enroll', 'policy_enroll_plan_id', 'Benefit'),
#     }
# netpro_policy_enroll_plan()

# class netpro_product_enroll(osv.osv):
#     _name = 'netpro.product_enroll'
#     _rec_name = 'product_id'
#     _columns = {
#         'policy_enroll_plan_id' : fields.many2one('netpro.policy_enroll_plan', 'Policy Enroll Plan'),
        
#     }
# netpro_product_enroll()

# class netpro_benefit_enroll(osv.osv):
#     _name = 'netpro.benefit_enroll'
#     _columns = {
#         #'product_enroll_id' : fields.many2one('netpro.product_enroll', 'Enroll Plan'),
#         'policy_enroll_plan_id' : fields.many2one('netpro.policy_enroll_plan', 'Policy Enroll Plan'),
#         'benefit_id' : fields.many2one('netpro.benefit', 'Benefit'),
#         'default_limit_id': fields.many2one('netpro.default_limit', 'Default Limit'),
#         'value_limit' : fields.float('Value Limit'),
#     }
# netpro_benefit_enroll()

class netpro_branch(osv.osv):
    _name = 'netpro.branch'
    _inherits = {'res.partner':'partner_id'}

    # def create(self, cr, uid, vals, context=None):
    #     # import pdb;pdb.set_trace()
    #     new_id = super(res_partner, self).create(cr, uid, vals, context=context)
    #     return new_id
         
    _columns = {
        'partner_id': fields.many2one('res.partner', 'Partner', 
            required=True, select=True, ondelete='cascade'),
        'id_branch'                 : fields.char('Branch ID'),
        'code_alias'                : fields.char('Code Alias'),
        'pic_id'                    : fields.many2one('res.users', 'Person In Charge'),
        'title'                     : fields.char('Title'),
        'start_date'                : fields.date('Start Date'),
        'end_date'                  : fields.date('End Date'),
        'last_close_month'          : fields.integer('Last Close Month'),
        'last_close_year'           : fields.integer('Last Close Year'),
        'last_consolidated_month'   : fields.integer('Last Consolidated Year'),
        'last_consolidated_year'    : fields.integer('Last Consolidated Year'),
        'production_locked_date'    : fields.date('Production Locked Date'),
        'finance_locked_date'       : fields.date('Finance Locked Date'),
        'backdated_date'            : fields.date('Backdated Date'),
        'kpp_id'                    : fields.many2one('netpro.kpp', 'KPP'),
        'profit_loss_account'       : fields.many2one('account.account', 'Profit / Loss Account'),
        'tax_account'               : fields.many2one('account.account', 'Tax Account'),
        'dividen_account'           : fields.many2one('account.account', 'Dividen Account'),
        'inter_office_account'      : fields.many2one('account.account', 'Inter-Office Account'),
        'gain_loss_account'         : fields.many2one('account.account', 'Gain / Loss Account'),
        'retained_earnings'         : fields.many2one('account.account', 'Retained Earnings'),
        'active'                    : fields.boolean('Active'),
        'operating_branch'          : fields.boolean('Operating Branch'),
        'syariah_branch'            : fields.boolean('Syariah Branch'),
    }
netpro_branch()

class netpro_kpp(osv.osv):
    _name = 'netpro.kpp'
    _columns = {
        'kpp_id': fields.char('KPP ID'),
        'name': fields.char('Name'),
    }

class netpro_policy_category(osv.osv):
    _name = 'netpro.policy_category'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_policy_category()

class netpro_policy_type(osv.osv):
    _name = 'netpro.policy_type'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_policy_type()

class netpro_policy_group(osv.osv):
    _name = 'netpro.policy_group'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_policy_group()

class netpro_toc(osv.osv):
    _name = 'netpro.toc'
    _columns = {
        'name': fields.char('TOC'),
        'description': fields.text('Description'),
        'ujroh': fields.float('Ujroh'),
    }
netpro_toc()

class netpro_segment(osv.osv):
    _name = 'netpro.segment'
    _columns = {
        'name': fields.char('Segment'),
        'description': fields.text('Description'),
    }
netpro_segment()

# pindah ke vit_actuary
# class netpro_lob(osv.osv):
#     _name = 'netpro.lob'
#     _columns = {
#         'name': fields.char('LOB'),
#         'description': fields.text('Description'),
#     }
# netpro_lob()

class netpro_occupation(osv.osv):
    _name = 'netpro.occupation'
    _columns = {
        'name': fields.char('Occupation'),
        'description': fields.text('Description'),
    }
netpro_occupation()

class netpro_payment_option_mode(osv.osv):
    _name = 'netpro.payment_option_mode'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_payment_option_mode()

class netpro_payment_option_installment(osv.osv):
    _name = 'netpro.payment_option_installment'
    _columns = {
        'name': fields.char('Name'),
        'point': fields.integer('Point'),
        'description': fields.text('Description'),
    }
netpro_payment_option_installment()

class netpro_refund_type(osv.osv):
    _name = 'netpro.refund_type'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_refund_type()

class netpro_print_card_order(osv.osv):
    _name = 'netpro.print_card_order'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_print_card_order()

class netpro_calculation_method(osv.osv):
    _name = 'netpro.calculation_method'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_calculation_method()

class netpro_prorate_calc_method(osv.osv):
    _name = 'netpro.prorate_calc_method'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_prorate_calc_method()

class netpro_expired_claim_receipt(osv.osv):
    _name = 'netpro.expired_claim_receipt'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_expired_claim_receipt()

class netpro_payment_due_interval(osv.osv):
    _name = 'netpro.payment_due_interval'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_payment_due_interval()

class netpro_max_children(osv.osv):
    _name = 'netpro.max_children'
    _columns = {
        'name': fields.char('Name'),
        'point': fields.integer('Point'),
        'description': fields.text('Description'),
    }
netpro_max_children()

class netpro_max_children_maternity(osv.osv):
    _name = 'netpro.max_children_maternity'
    _columns = {
        'name': fields.char('Name'),
        'point': fields.integer('Point'),
        'description': fields.text('Description'),
    }
netpro_max_children_maternity()

class netpro_card_type(osv.osv):
    _name = 'netpro.card_type'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_card_type()

class netpro_pre_existing_condition(osv.osv):
    _name = 'netpro.pre_existing_condition'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_pre_existing_condition()

class netpro_up_room_class(osv.osv):
    _name = 'netpro.up_room_class'
    _columns = {
        'name': fields.char('Name'),
        'point': fields.integer('Point'),
    }
netpro_up_room_class()

class netpro_coverage(osv.osv):
    _name = 'netpro.coverage'
    _rec_name = 'no_plan'
    _columns = {
        'product_type_id': fields.many2one('netpro.product_type', 'Product Type'),
        'product_id': fields.many2one('netpro.product', 'Product ID'),
        'reimbursement': fields.float('Reimbursement'),
        'provider': fields.float('Provider'),
        'excess_pay_on_the_spot': fields.boolean('Excess Pay on the Spot'),
        'swipe_card': fields.boolean('Swipe Card'),
        'show_card': fields.boolean('ShowCard'),
        'reimbursement_boolean': fields.boolean('Reimbursement'),
        'no_plan': fields.selection([('1','1'),('2','2'),('3','3'),('4','4'),('5','5'),('6','6'),('7','7'),('8','8')],'No Of Plan'),
        'no_of_benefit': fields.integer('No Of Benefit'),
        'default_limit_id': fields.many2one('netpro.default_limit', 'Default Limit'),
        'annual_limit_per_disability': fields.boolean('Annual Limit Per Disability'),
        'family_limit': fields.boolean('Family Limit'),
        'family_premium': fields.boolean('Family Premium'),
        'use_child_premium': fields.boolean('Use Child Premium'),
        'aso_coverage': fields.boolean('ASO Coverage'),
        'hi_plan': fields.boolean('Hi Plan'),
        'maximum_age_employee': fields.integer('Maximum Age Employee'),
        'maximum_age_spouse': fields.integer('Maximum Age Spouse'),
        'maximum_age_children': fields.integer('Maximum Age Children'),
        'aso_fee_per_member': fields.float('ASO Fee Per Member'),
        'aso_commission': fields.float('ASO Commission'),
        'aso_commission_in_percent': fields.float('ASO Commission In Percent'),
        'aso_fee_per_claim': fields.float('ASO Fee Per Claim'),
        'aso_fee_per_claim_amount': fields.float('ASO Fee Per Claim Amount'),
        'not_process_excesson_deposit': fields.boolean('Not Process Excess on Deposit'),
        'print_option_seq_no': fields.integer('Seq No.'),
        'print_option_print_text_on_card': fields.char('Print Text (On Card)'),
        'print_card_with_plan_amount': fields.boolean('Print Card with Plan Amount'),
        'membership_option_not_allowed_for_employee': fields.boolean('Not Allowed for Employee'),
        'membership_option_not_allowed_for_spouse': fields.boolean('Not Allowed for Spouse'),
        'membership_option_not_allowed_for_child': fields.boolean('Not Allowed for Child'),
        'policy_id': fields.many2one('netpro.policy', 'Policy'),
    }
netpro_coverage()

class netpro_class(osv.osv):
    _name = 'netpro.class'
    _rec_name = 'class_no'
    _columns = {
        'class_no': fields.integer('Class No'),
        'short_desc': fields.char('Short Desc'),
        'description': fields.text('Description'),
        'policy_id': fields.many2one('netpro.policy', 'Policy'),
        'membership_plan_employee_ids': fields.one2many('netpro.membership_plan_employee', 'class_id', 'Membership Plans Employee', ondelete='cascade'),
        'membership_plan_spouse_ids': fields.one2many('netpro.membership_plan_spouse', 'class_id', 'Membership Plans spouse_limit', ondelete='cascade'),
        'membership_plan_child_ids': fields.one2many('netpro.membership_plan_child', 'class_id', 'Membership Plans Child', ondelete='cascade'),
    }
netpro_class()

class netpro_plan_schedule(osv.osv):
    _name = 'netpro.plan_schedule'
    _rec_name = 'product_plan_id'
    _columns = {
        'product_plan_id': fields.many2one('netpro.product_plan', 'Product Plan'),
        'bamount': fields.float('BAmount'),
        'reimbursement': fields.float('Reimbursement'),
        'reimbursement_affect_to_benefit': fields.boolean('Reimbursement Affect To Benefit'),
        'individual_overall_limit_amount_point': fields.integer('Individual Overall Limit Amount'),
        'individual_overall_limit_amount_interval': fields.integer('Individual Overall Limit Amount Interval'),
        'family_overall_limit_amount_point': fields.integer('Family Overall Limit Amount'),
        'family_overall_limit_amount_interval': fields.integer('Family Overall Limit Amount Inteval'),
        'dependant_limit': fields.integer('Dependant Limit'),
        'spouse_limit': fields.integer('Spouse Limit'),
        'child_limit': fields.integer('@Child Limit'),
        '1_dependant': fields.char('+1 Dependant'),
        '2_dependant': fields.char('+2 Dependant'),
        '3_dependant': fields.char('+3 Dependant'),
        '4_dependant': fields.char('+4 Dependant'),
        '5_dependant': fields.char('+5 Dependant'),
        '6_dependant': fields.char('+6 Dependant'),
        '7_dependant': fields.char('+7 Dependant'),
        '8_dependant': fields.char('+8 Dependant'),
        '9_dependant': fields.char('+9 Dependant'),
        'aggregate_limit': fields.integer('Aggregate Limit'),
        'group_discount': fields.float('Group Discount'),
        'premium_discount': fields.float('Premium Discount'),
        'loading': fields.float('Loading'),
        'deductible': fields.float('Deductible'),
        'no_refund': fields.boolean('No Refund'),
        'no_refund_if_any_claim': fields.boolean('No Refund If Any Claim'),
        'hi_plan': fields.boolean('Hi Plan', help='Apply As Charge if R&B Same or Lower than Taken Benefit'),
        'aso_plan': fields.boolean('ASO Plan'),
        'maximum_age_employee': fields.integer('For Employee'),
        'maximum_age_spouse': fields.integer('For Spouse'),
        'maximum_age_children': fields.integer('For Children'),
        'sequence_no': fields.integer('Sequence No'),
        'provider_level_id': fields.many2one('netpro.provider_level', 'Provider Level'),
        'plan_schedule_detail_benefit_schedule_ids': fields.one2many('netpro.plan_schedule_detail_benefit_schedule', 'plan_schedule_id', 'Plan Schedule', ondelete='cascade'),
        'policy_id': fields.many2one('netpro.policy', 'Policy'),
        'plan_for':fields.char('Plan For'),
        'class_id':fields.many2one('netpro.class','Class'),
    }
netpro_plan_schedule()

class netpro_business_source(osv.osv):
    _name = 'netpro.business_source'
    _rec_name = 'agent_id'
    _columns = {
        'agent_id': fields.many2one('netpro.agent', 'Agent'),
        'business_source_type_id': fields.many2one('netpro.business_source_type', 'Type'),
        'commission': fields.float('Commission'),
        'commission_only_apply_on_new_business': fields.boolean('Commission Only Apply On New Business'),
        'aso_commission': fields.boolean('ASO Commission'),
        'aso_commissiononly_apply_on_new_business': fields.boolean('ASO Commission only apply on New Business'),
        'aso_remarks_by_system': fields.text('ASO Remarks by System'),
        'policy_id': fields.many2one('netpro.policy', 'Policy'),
    }
netpro_business_source()

class netpro_default_limit(osv.osv):
    _name = 'netpro.default_limit'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_default_limit()

class netpro_agent(osv.osv):
    _name = 'netpro.agent'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_agent()

class netpro_business_source_type(osv.osv):
    _name = 'netpro.business_source_type'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_business_source_type()

class netpro_membership_plan_employee(osv.osv):
    _name = 'netpro.membership_plan_employee'
    _rec_name = 'class_id'
    _columns = {
        'class_id': fields.many2one('netpro.class', 'Class'),
        'product_plan_id': fields.many2one('netpro.product_plan', 'Product Plan'),
        'overall_limit': fields.float('Overall Limit'),
        'male_female_bamount': fields.float('Male / Female BAmount'),
        'occur_in_other_membership': fields.boolean('Occur in Other Membership'),
        'benefit_ids': fields.one2many('netpro.membership_benefit','membership_plan_employee_id','Class Benefit', ondelete="cascade"),
    }

    def onchange_pplan(self, cr, uid, ids, plan_id, context=None):
        res = {}
        
        if not plan_id:
            return res
        
        plan_obj = self.pool.get('netpro.product_plan').browse(cr, uid, plan_id, context=None)
        
        if plan_obj.overall_limit:
            res = {
                'value' : {
                    'overall_limit' : plan_obj.overall_limit,
                }
            }
        
        return res

netpro_membership_plan_employee()

class netpro_membership_plan_spouse(osv.osv):
    _name = 'netpro.membership_plan_spouse'
    _rec_name = 'class_id'
    _columns = {
        'class_id': fields.many2one('netpro.class', 'Class'),
        'product_plan_id': fields.many2one('netpro.product_plan', 'Product Plan'),
        'overall_limit': fields.float('Overall Limit'),
        'male_female_bamount': fields.float('Male / Female BAmount'),
        'occur_in_other_membership': fields.boolean('Occur in Other Membership'),
        'benefit_ids': fields.one2many('netpro.membership_benefit','membership_plan_spouse_id','Class Benefit', ondelete="cascade"),
    }

    def onchange_pplan(self, cr, uid, ids, plan_id, context=None):
        res = {}
        
        if not plan_id:
            return res
        
        plan_obj = self.pool.get('netpro.product_plan').browse(cr, uid, plan_id, context=None)
        
        if plan_obj.overall_limit:
            res = {
                'value' : {
                    'overall_limit' : plan_obj.overall_limit,
                }
            }
        
        return res
netpro_membership_plan_spouse()

class netpro_membership_plan_child(osv.osv):
    _name = 'netpro.membership_plan_child'
    _rec_name = 'class_id'
    _columns = {
        'class_id': fields.many2one('netpro.class', 'Class'),
        'product_plan_id': fields.many2one('netpro.product_plan', 'Product Plan'),
        'overall_limit': fields.float('Overall Limit'),
        'male_female_bamount': fields.float('Male / Female BAmount'),
        'occur_in_other_membership': fields.boolean('Occur in Other Membership'),
        'benefit_ids': fields.one2many('netpro.membership_benefit','membership_plan_child_id','Class Benefit', ondelete="cascade"),
    }

    def onchange_pplan(self, cr, uid, ids, plan_id, context=None):
        res = {}
        
        if not plan_id:
            return res
        
        plan_obj = self.pool.get('netpro.product_plan').browse(cr, uid, plan_id, context=None)
        
        if plan_obj.overall_limit:
            res = {
                'value' : {
                    'overall_limit' : plan_obj.overall_limit,
                }
            }
        
        return res
netpro_membership_plan_child()

class netpro_class_benefit(osv.osv):
    _name = 'netpro.membership_benefit'
    _columns = {
        'membership_plan_employee_id' : fields.many2one('netpro.membership_plan_employee', 'Employee'),
        'membership_plan_spouse_id' : fields.many2one('netpro.membership_plan_spouse', 'Spouse'),
        'membership_plan_child_id' : fields.many2one('netpro.membership_plan_child', 'Child'),
        'benefit_id' : fields.many2one('netpro.benefit', 'Benefit'),
        'default_limit_id': fields.many2one('netpro.default_limit', 'Default Limit'),
        'value_limit' : fields.float('Value Limit'),
    }
netpro_class_benefit()

class netpro_plan_schedule_detail_benefit_schedule(osv.osv):
    _name = 'netpro.plan_schedule_detail_benefit_schedule'
    _rec_name = 'plan_schedule_id'
    _columns = {
        'plan_schedule_id': fields.many2one('netpro.plan_schedule', 'Plan Schedule'),
        'product_plan_id': fields.many2one('netpro.product_plan', 'Product Plan'),
        'bamount': fields.float('BAmount'),
        'benefit_id': fields.many2one('netpro.benefit', 'Benefit ID'),
        'parent_benefit_id': fields.many2one('netpro.benefit', 'Parent Benefit'),
        'pre': fields.char('Pre'),
        'post': fields.char('Post'),
        'min_allowed': fields.float('Min Allowed'),
        'max_allowed': fields.float('Max Allowed'),
        'difference _provider_non_provider': fields.boolean('Difference Provider & Non Provider'),
        'not_affect_to_overall_limit': fields.boolean('Not Affect to Overall Limit'),
        'occurance_inner_limit': fields.boolean('Occurance Inner Limit'),
        'occurance_inner_limit_limit': fields.float('Limit'),
        'occurance_inner_limit_max': fields.float('Max'),
        'occurance_inner_limit_std': fields.float('Std.'),
        'confinement_inner_limit': fields.boolean('Confinement Inner Limit'),
        'confinement_inner_limit_limit': fields.float('Limit'),
        'confinement_inner_limit_max': fields.float('Max'),
        'confinement_inner_limit_std': fields.float('Std.'),
        'annual_inner_limit': fields.boolean('Annual Inner Limit'),
        'annual_inner_limit_limit': fields.float('Limit'),
        'annual_inner_limit_max': fields.float('Max'),
        'annual_inner_limit_std': fields.float('Std.'),
        'annual_inner_limit_family': fields.float('Family'),
        'annual_inner_limit_max_family': fields.float('Family Max'),
        'annual_inner_limit_std_family': fields.float('Family Std.'),
        'company_inner_limit': fields.boolean('Company Inner Limit'),
        'company_inner_limit_limit': fields.float('Limit'),
        'company_inner_limit_max': fields.float('Max'),
        'company_inner_limit_std': fields.float('Std.'),
        'company_inner_limit_reimbursement': fields.float('Reimbursement'),
        'company_inner_limit_seq_no': fields.integer('Seq. No.'),
        'non_provider_occurance_inner_limit': fields.boolean('Occurance Inner Limit'),
        'non_provider_occurance_inner_limit_limit': fields.float('Limit'),
        'non_provider_occurance_inner_limit_max': fields.float('Max'),
        'non_provider_occurance_inner_limit_std': fields.float('Std.'),
        'non_provider_confinement_inner_limit': fields.boolean('Confinement Inner Limit'),
        'non_provider_confinement_inner_limit_limit': fields.float('Limit'),
        'non_provider_confinement_inner_limit_max': fields.float('Max'),
        'non_provider_confinement_inner_limit_std': fields.float('Std.'),
        'non_provider_annual_inner_limit': fields.boolean('Annual Inner Limit'),
        'non_provider_annual_inner_limit_limit': fields.float('Limit'),
        'non_provider_annual_inner_limit_max': fields.float('Max'),
        'non_provider_annual_inner_limit_std': fields.float('Std.'),
        'non_provider_annual_inner_limit_family_limit': fields.float('Family'),
        'non_provider_annual_inner_limit_family_max': fields.float('Family Max'),
        'non_provider_annual_inner_limit_family_std': fields.float('Family Std.'),
        'non_provider_company_inner_limit': fields.boolean('Company Inner Limit'),
        'non_provider_company_inner_limit_limit': fields.float('Limit'),
        'non_provider_company_inner_limit_max': fields.float('Max'),
        'non_provider_company_inner_limit_std': fields.float('Std.'),
    }
netpro_plan_schedule_detail_benefit_schedule()

class netpro_plan_schedule_detail_diagnosis_exclusion(osv.osv):
    _name = 'netpro.plan_schedule_detail_diagnosis_exclusion'
    _rec_name = 'plan_schedule_id'
    _columns = {
        'plan_schedule_id': fields.many2one('netpro.plan_schedule', 'Plan Schedule'),
        'master_diagnosis_exclusion_id': fields.many2one('netpro.master_diagnosis_exclusion', 'Master Diagnosis Exclusion'),
        'description': fields.text('Description'),
    }
netpro_plan_schedule_detail_diagnosis_exclusion()

class netpro_plan_schedule_detail_diagnosis_exclusion_exception(osv.osv):
    _name = 'netpro.plan_schedule_detail_diagnosis_exclusion_exception'
    _rec_name = 'plan_schedule_id'
    _columns = {
        'plan_schedule_id': fields.many2one('netpro.plan_schedule', 'Plan Schedule'),
        'master_diagnosis_exclusion_id': fields.many2one('netpro.master_diagnosis_exclusion', 'Master Diagnosis Exclusion'),
        'description': fields.text('Description'),
    }
netpro_plan_schedule_detail_diagnosis_exclusion_exception()

# >>> pindah ke vit_actuary
# class netpro_benefit(osv.osv):
#     _name = 'netpro.benefit'
#     _columns = {
#         'benefit_id': fields.char('Benefit ID'),
#         'name': fields.char('Name'),
#         'as_parent': fields.boolean('As Parent'),
#     }
# netpro_benefit()

class netpro_master_diagnosis_exclusion(osv.osv):
    _name = 'netpro.master_diagnosis_exclusion'
    _rec_name = 'diagnosis_id'
    _columns = {
        'diagnosis_id': fields.char('Diagnosis ID'),
        'description': fields.text('Diagnosis Description'),
        'poly': fields.char('Poly'),
        'as_exception': fields.boolean('As Exception'),
    }
netpro_master_diagnosis_exclusion()

class netpro_correspondence_rule(osv.osv):
    _name = 'netpro.correspondence_rule'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_correspondence_rule()

class netpro_claim_rule(osv.osv):
    _name = 'netpro.claim_rule'
    _columns = {
        'name': fields.char('Name'),
        'description': fields.text('Description'),
    }
netpro_claim_rule()

class res_partner(osv.osv):
    _name = 'res.partner'
    _inherit = 'res.partner'
    _columns = {
        'policy_holder_flag' : fields.boolean('Is Policy Holder'),
        'marketing_officer_flag' : fields.boolean('Is Marketing Officer'),
        'policy_ids' : fields.one2many('netpro.policy','policy_holder_id','Policy', ondelete="cascade"),
    }
res_partner()