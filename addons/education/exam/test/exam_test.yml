- 
  When exam time will come I will create a new exam "Final Exam" & its timetable.
- 
  !record {model: exam.exam, id: exam_exam_finalexam0}:
    created_at: !eval time.strftime('%Y')+'/03/02'
    end_date: !eval time.strftime('%Y')+'/03/08'
    exam_code: !eval time.strftime('%Y /%m')+'/003'
    exam_timetable_ids:
      - class_id: school.demo_school_standard_1
        division_id: school.demo_standard_division_1
        medium_id: school.demo_standard_medium_1
        name: Final Exam Timetable
        timetable_type: exam
        year_id: school.demo_academic_year_1
    name: Final Exam
    start_date: !eval time.strftime('%Y')+'/03/05'
    
- 
  I will create a additional exam, when it is required.
- 
  !record {model: additional.exam, id: additional_exam_supplementaryexam0}:
    addtional_exam_code: !eval time.strftime('%Y /%m')+'/003'
    created_at: !eval time.strftime('%Y')+'/03/09'
    exam_date: !eval time.strftime('%Y')+'/03/17'
    name: Supplementary Exam
    standard_id: school.demo_school_standard_1
    
- 
  When exam will over, I will generate result for students.
- 
  !record {model: exam.result, id: exam_result_10}:
    percentage: 90.75
    result: Pass
    result_ids:
      - maximum_marks: 100.0
        minimum_marks: 40.0
        obtain_marks: 80.0
      - maximum_marks: 100.0
        minimum_marks: 40.0
        obtain_marks: 98.0
      - maximum_marks: 100.0
        minimum_marks: 40.0
        obtain_marks: 88.0
      - maximum_marks: 100.0
        minimum_marks: 40.0
        obtain_marks: 97.0
    s_exam_ids: exam_exam_finalexam0
    student_id: school.demo_student_student_1
    total: 363.0
    
-
  In order to test the exam result, I will test _compute_total() method
-
  !python {model: exam.result}:  |
    self._compute_total(cr, uid, [ref("exam_result_10")], 'total', None, context=None)


-
  In order to test the exam result, I will test _compute_per() method
-
  !python {model: exam.result}:  |
    self._compute_per(cr, uid, [ref("exam_result_10")], 'percentage', None, context=None)    
    
-
  In order to test the exam result, I will test _compute_result() method
-
  !python {model: exam.result}:  |
    self._compute_result(cr, uid, [ref("exam_result_10")], 'result', None, context=None)
  
-
  In order to test the additional exam result, I will test _compute_total() method
-
  !report {string: Result Report,
    auto: False, model: exam.result,
    id: exam_result_10,
    rml: exam/report/result_information_report.rml,
    name: result}
  
- 
  When additional exam will over, I will generate result for students.
- 
  !record {model: additional.exam.result, id: additional_exam_result_100}:
    result: Pass
    a_exam_id: additional_exam_supplementaryexam0
    student_id: school.demo_student_student_4
    obtain_marks: 50.00
    
-
  In order to test the additional exam result, I will test _calc_result() method
-
  !python {model: additional.exam.result}:  |
    self._calc_result(cr, uid, [ref("additional_exam_result_100")], 'result', None, context=None)
    
-
  Testing additional.exam.result Report
-
  !report {string: Additional Exam Result Report,
    auto: False, model: additional.exam.result,
    id: additional_exam_result_100,
    rml: exam/report/add_exm_result_information_report.rml,
    name: additional_exam_result}
